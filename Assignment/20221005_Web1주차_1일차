# Web 1주차 - 1일차 과제

# DOM

DOM은 HTML 문서에 대한 인터페이스.

- 뷰 포트에 무엇을 렌더링 할지 결정하기 위해 사용.
- 페이지의 콘텐츠 및 구조, 스타일이 자바스크립트 프로그램에 의해 수정되기 위해 사용.

DOM은 원본 HTML 문서 형태와 비슷하지만 몇 가지 차이점이 있습니다.

- 항상 유효한 HTML 형식입니다.
- 자바스크립트에 수정될 수 있는 동적 모델이어야 합니다.
- 가상 요소를 포함하지 않습니다. (Ex. `::after`)
- 보이지 않는 요소를 포함합니다. (Ex. `display: none`)

> [https://wit.nts-corp.com/2019/02/14/5522](https://wit.nts-corp.com/2019/02/14/5522)
> 

> [https://developer.mozilla.org/ko/docs/Web/API/Document_Object_Model/Introduction](https://developer.mozilla.org/ko/docs/Web/API/Document_Object_Model/Introduction)
> 

> [http://www.tcpschool.com/javascript/js_dom_concept](http://www.tcpschool.com/javascript/js_dom_concept)
> 

# HTML구조, 필수 태그

```html
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Index</title>
</head>
<body>
    
</body>
</html>
```

<!DOCTYPE HTML> : 문서 유형 지정, HTML을 사용한다고 브라우저에 선언하는 역할.

<html> : 웹문서 전체를 감싸는 태그로 하나만 존재해야 한다. 이 태그 바깥에는 DOCTYPE 태그만 존재해야 한다.

<head> : html 문서에 대한 정보로 메타데이터를 정의한다. 하나만 존재해야 하고, html 태그 바로 아래에 위치해야 한다.

→ CSS, JavaScript, meta 태그가 위치.

<title> : head 태그 안에 들어가는 태그로 제목표시줄의 내용. 하나만 존재, html에 바로 아래에 위치 해야 한다.

<meta> : head 태그 안에 들어가는 태그로 문서에 대한 설명 표기. 브라우저만 읽을 수 있다.

<body> : 실제 화면에 보여지는 부분,이다. 하나만 존재해야 한다. html 바로 아래, head 다음에 위치해야 한다.

> [http://www.tcpschool.com/html/html_intro_basicStructure](http://www.tcpschool.com/html/html_intro_basicStructure)
> 

> [https://wikidocs.net/86172](https://wikidocs.net/86172)
> 

> [https://xenostudy.tistory.com/636](https://xenostudy.tistory.com/636)
> 

# CSS 필수 속성

## text 속성

font-family : 글꼴 지정. 속성 값으로 글꼴명 입력.

font-size : 텍스트 크기 지정. 속성 값으로 단위를 포함해서 크기 입력.

font-weight : 텍스트 굵기 지정. 속성 값으로 숫자, 키워드(lighter, normal, bold, bolder) 사용.

font-style : 글꼴 스타일 지정.

속성값

- normal : 기본
- italic : 이탤릭체
- oblique : 기울임꼴.

font-variant : 영문 텍스트를 크기가 작은 대문자로 변경.

속성값

- small-caps : 텍스트를 작은 대문자로 변환.

color : 텍스트 색상 지정. 

속성값

- 키워드 : 색상의 영문명 사용.
- RGB 색상 표기법 : Red, Green, Blue를 사용해서 특정 색 표현. 투명도로 alpha 값을 사용할 수도 있음.
- HEX 표기법 : RGB에 해당하는 값을 16진수로 변환해서 표기. #을 앞에 붙여서 사용.

text-align : 텍스트 정렬 시 사용.

속성값

- left : 왼쪽 정렬
- center : 중앙 정렬
- right : 오른쪽 정렬
- justify : 양쪽 정렬

text-decoration : 텍스트에 선(장식)을 그을때 사용.

- none : 텍스트 장식을 모두 지움
- line-through : 중간을 관통하는 선
- overline : 텍스트 위에 선
- underline : 텍스트 아래에 선3

a태그에는 기본 속성으로 underline이 적용되어 있음.

letter-spacing : 글 사이 간격 지정.

line-height : 텍스트 한줄의 높이 지정.

속성값

- normal : 웹 브라우저의 기본값.
- 숫자 : 현재 font-size에 입력한 숫자를 곱한 값 적용.
- 퍼센트 : 현재 font-size에 입력한 비율을 곲한 값 적용.
- 크기 : 입력한 크기 적용.

## 박스 모델

![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f879dfd6-76d5-4dbc-a5f6-c8bbf5f0e4c1/Untitled.png)

content : 텍스트나 이미지가 들어있는 박스의 실질적인 내용.

속성(속성 값으로는 단위를 포함한 크기 사용)

- width : content 영역의 너비
- height : content 영역의 높이

margin : 테두리와 이웃하는 요소 사이의 간격으로 외부 여백이다. 눈에 보이지 않는다. 사각형 모양으로 각 방향을 독립적으로 다룰 수도 있고(margin-top, margin-right, margin-bottom, margin-left), 모든 방향을 통합하여 margin 속성으로도 사용 가능하다.

border : 내용과 패딩 주변을 감싸는 테두리. margin과 같이 모든 방향과 각 방향을 다룰 수 있다. 단, margin 속성과 달리 여러 속성 값을 복합적으로 사용한다.

padding : 내용과 테두리 사이의 간격으로 눈에 보이지 않는다.

### 박스 모델의 성격

- 블록 성격 : hn, p, div 태그를 사용할 때 요소의 너비가 항상 가로 한줄을 다 차지하는 셩격.
- 인라인 성격 : a, span, strong 태그를 사용할 때 요소의 너비는 콘텐츠 크기만큼만 차지하는 성격.
- 인라인 블록 성격 : 인라인 성격처럼 요소 너비는 콘텐츠 크기만큼이지만, 그 외의 성격은 블록 성격을 가진 복합적인 성격.
- 블록 VS 인라인 VS 인라인 블록
    
    박스 모델의 구성 요소와 관련된 속성 적용 시 차이가 있다. 블록 성격과 인라인 블록 성격은 width, height, margin, padding 속성을 전부 적용할 수 있지만, 인라인 성격은 width, height 속성은 적용되지 않고 padding과 margin 속성은 각각 왼쪽과 오른쪽만 적용된다(위, 아래는 적용 안됨).
    

display : 박스 모델의 성격을 변경할때 사용.

속성값

- block : 인라인 성격을 블록 성격으로 변경
- inline : 블록 성격을 인라인 성격으로 변경
- inline-block : 인라인 성격을 인라인 블록 성격으로 변경

background-color : 요소의 배경 색상 지정

background-image : 요소의 배경에 이미지 삽입. 속성값은 삽입할 이미지 경로를 url()함수로 지정. 요소의 배경 크기가 이미지보다 크면 이미지를 자동으로 반복해서 채운다.

background-repeat : 요소 배경에 이미지 반복 설정 지정.

속성값

- no-repeat : 이미지 반복 X
- repeat-x : 이미지를 가로 방향으로 반복
- repeat-y : 이미지를 세로 방향으로 반복
- repeat : 이미지를 가로와 세로 방향으로 반복
- round : 이미지를 반복하되 이미지 크기가 요소에 딱 맞도록 자동 조절
- space : 이미지가 잘리지 않도록 반복

background-size : 이미지 크기 지정.

속성값

- auto : 이미지 크기 유지
- cover : 이미지의 가로, 세로 비율을 유지하면서 크기를 확대/축소하여 요소의 배경에 꽉채움
- contaion : 이미지의 가로, 세로 비율을 유지하면서 이미지가 배경 요소 안에 들어가도록 크기를 확대/축소
- <너비 높이> : 이미지 크기를 직접 지정

background-position : 삽입하려는 이미지 위치 결정

속성값

- x - left, center, right : x축(가로) 방향 위치 지정
- y - top, center, bottom : y축(세로) 방향 위치 지정
- 공통 - px, rem, em, % : 위치 직접 지정

background-attachment : 요소에 삽입된 이미지를 스크롤할 때, 이미지 작동 방식 지정

속성값

- local : 삽입된 이미지가 요소와 웹 브라우저에서 모두 스크롤
- scroll : 요소에서는 고정되지만, 웹 브라우저에서는 스크롤
- fixed : 요소와 웹 브라우저에서 모두 고정

## 위치 속성

position : 요소를 좌푯값에 따라 배치할 때 지정

속성값

- static : 기본 흐름에 따라 배치(아무런 변화 없음)
- relative : 기본 흐름에 따라 배치하지만, 좌표 속성 사용 가능
    
    좌표 속성 : top, right, bottom, left
    
- absolue : 기본 흐름에서 벗어나 절대적인 좌표 위치에 배치
- fixed : 기본 흐름에서 벗어나 절대적인 좌표 위치에 배치. 단, 스크롤해도 해당 위치에 고정
- sticky : static처럼 기본 흐름에 따라 배치하지만, 지정 좌표의 임계점에 이르면 fixed값처럼 화면에 고정

float : 요소를 화면에 배치할때 지정하는 또 다른 방법.

속성값

- none : float 속성 적용X
- left : 대상 요소를 공중에 띄워 왼쪽에 배치하면서 다음에 오는 요소를 주변에 자연스럽게 배치
- right : 대상 요소를 공중에 띄워 오른쪽에 배치하면서 다음에 오는 요소를 주변에 자연스럽게 배치

clear : float 속성을 해제할 때 사용(float 속성이 대상 요소의 다음 요소에 영향을 주기 때문).

속성값

- left : float 속성의 left 값 해제
- right : float 속성의 right 값 해제
- both : float 속성의 left와 right 값 모두 해제

> [https://thebook.io/080313/](https://thebook.io/080313/)
> 

> [https://blogpack.tistory.com/1124](https://blogpack.tistory.com/1124)4
> 

> [tcpschool.com/css/css_boxmodel_boxmodel](http://tcpschool.com/css/css_boxmodel_boxmodel)
> 

> [https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model](https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model)
> 

# CSS 선택자(Selector)

### 선택자 종류

전체 선택자 : * 

class : .

id : #

### 우선 순위

* < 요소(태그)선택자 < class < id

동일한 선택자인 경우 아래쪽에 작성된 css가 적용됨.

### 하위 선택자

```html
#main div {
	border : 3px solid red;
}
```

후행 선택자(div)가 반드시 선행 선택자(#main) 안에 포함되어 있을 경우

### 자식 선택자

```html
#main > div {
	border : 3ps solid red;
}
```

후행 선택자(div)가 부모 요소로 선행 선택자를 가지고 있는 경우

### 형제선택자

```html
h1 + p {
	color : blue;
}
.note ~ p {
	color : red;
}
```

선택자+선택자 : 선행 선택자 뒤에 후행 선택자를 선택

선택자~선택자 : 선행 선택자 뒤에 인접하여 등장하는 모든 후행 선택자를 선택

### 선택자 그룹

컴마로 선택자를 한 번에 선언해서 모든 선택자에게 적용.

> [https://seulbinim.github.io/WSA/selector.html#선택자의-우선-순위](https://seulbinim.github.io/WSA/selector.html#%EC%84%A0%ED%83%9D%EC%9E%90%EC%9D%98-%EC%9A%B0%EC%84%A0-%EC%88%9C%EC%9C%84)
>
